package de.bergwild.android.mobile.audio;

import java.io.File;
import java.util.ArrayList;

import android.app.Notification;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.media.MediaPlayer;
import android.net.Uri;
import android.os.Binder;
import android.os.Handler;
import android.os.IBinder;
import android.support.v4.app.NotificationCompat;
import android.view.View;
import android.widget.SeekBar;
import de.bergwild.android.mobile.AudioshowActivity;
import de.bergwild.android.mobile.MainMobile;
import de.bergwild.android.mobile.R;
import de.bergwild.android.mobile.service.UpdateService;
import de.bergwild.android.mobile.tools.Out;
import de.bw.mm.MMedia;

public class AudioService extends Service {
	public static boolean curentlyRunning = false;

	public static String ACTION_BROADCAST = "de.bergwild.android.mobile.service.BROADCAST_AUDIOSERVICE";
	// public static final int BROADCASTTYPE_DURATION = 1;
	public static final int BROADCASTTYPE_PROGRESS = 2;
	public static final int BROADCASTTYPE_FINISHED = 3;
	public static final int BROADCASTTYPE_PLAYINGSTARTED = 4;
	public static final int BROADCASTTYPE_PLAYINGSTOPPED = 5;

	public static final String TAG_MEDIAID = "mediaid";
	public static final String TAG_BROADCASTTYPE = "type";
	public static final String TAG_DURATION = "duration";
	public static final String TAG_PROGRESS = "progress";
	private final Handler handler = new Handler();
	private final IBinder mBinder = new LocalBinder();
	private MediaPlayer mediaPlayer;

	private String playingChapterUid;
	// private int duration = 1;
	private int currentIndex;
	private ArrayList<MMedia> audioTracks;
	private MMedia currentMedia;
	private Runnable progressNotification;

	public static final int NOTIFICATION_ID = 41247;
	private NotificationManager mNotifyManager;
	private NotificationCompat.Builder mBuilder;

	/**
	 * Wenn die Activity erneut sichtbar wird und dadurch den Service nochmal bindet, dann wird hier onCreate() nicht
	 * wiederholt aufgerufen. Wohl aber die Methode onServiceConnected() in der Activity
	 **/
	@Override
	public void onCreate() {
		super.onCreate();
		curentlyRunning = true;
		mNotifyManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);
		mBuilder = new NotificationCompat.Builder(AudioService.this);
		Out.s("### AudioService onCreate");

		// manager = (LocationManager) getSystemService(LOCATION_SERVICE);
		// manager.requestLocationUpdates(LocationManager.GPS_PROVIDER, intervallMs, 0, locListener);
	}

	@Override
	public void onDestroy() {
		super.onDestroy();
		Out.s("### GPSService onDestroy");
		stopPlayer();
		curentlyRunning = false;
		// manager.removeUpdates(locListener);
	}

	@Override
	public IBinder onBind(Intent intent) {
		// trackname = intent.getExtras().getString(TAG_TRACKNAME);
		// String filepath = intent.getExtras().getString(TAG_TRACKFILEPATH);
		//
		// if (filepath != null && filepath.length() > 0)
		// trackFile = new File(filepath);

		Out.s("### GPSService onBind");

		return mBinder;
	}

	public void startPlayProgressUpdater() {
		if (mediaPlayer == null)
			return;

		sendProgressBroadcast(mediaPlayer.getCurrentPosition(), mediaPlayer.getDuration(), currentMedia.getId());

		if (mediaPlayer.isPlaying()) {
			progressNotification = new Runnable() {
				public void run() {
					startPlayProgressUpdater();
				}
			};
			handler.postDelayed(progressNotification, 1000);
		} else
			pausePlayer();

	}

	// This is event handler thumb moving event
	public void seekChange(View v) {
		if (mediaPlayer != null && mediaPlayer.isPlaying()) {
			SeekBar sb = (SeekBar) v;
			mediaPlayer.seekTo(sb.getProgress());
		}
	}

	public class LocalBinder extends Binder {
		public AudioService getService() {
			return AudioService.this;
		}
	}

	private void sendProgressBroadcast(int progress, int duration, long mediaId) {
		mBuilder.setProgress(duration, progress, false).setContentText(currentMedia.getInfo());
		mNotifyManager.notify(NOTIFICATION_ID, mBuilder.build());

		final Intent broadcastIntent = new Intent(ACTION_BROADCAST);
		broadcastIntent.putExtra(TAG_BROADCASTTYPE, BROADCASTTYPE_PROGRESS);
		broadcastIntent.putExtra(TAG_PROGRESS, progress);
		broadcastIntent.putExtra(TAG_DURATION, duration);
		broadcastIntent.putExtra(TAG_MEDIAID, mediaId);
		getApplicationContext().sendBroadcast(broadcastIntent);
	}

	private void sendFinishedBroadcast() {
		final Intent broadcastIntent = new Intent(ACTION_BROADCAST);
		broadcastIntent.putExtra(TAG_BROADCASTTYPE, BROADCASTTYPE_FINISHED);
		getApplicationContext().sendBroadcast(broadcastIntent);
	}

	private void sendPlayinStartedBroadcast() {
		final Intent broadcastIntent = new Intent(ACTION_BROADCAST);
		broadcastIntent.putExtra(TAG_BROADCASTTYPE, BROADCASTTYPE_PLAYINGSTARTED);
		getApplicationContext().sendBroadcast(broadcastIntent);
	}

	private void sendPlayinStoppedBroadcast() {
		final Intent broadcastIntent = new Intent(ACTION_BROADCAST);
		broadcastIntent.putExtra(TAG_BROADCASTTYPE, BROADCASTTYPE_PLAYINGSTOPPED);
		getApplicationContext().sendBroadcast(broadcastIntent);
	}

	public void switchPlayPause() {
		try {

			boolean playing = mediaPlayer != null && mediaPlayer.isPlaying();
			if (playing)
				pausePlayer();
			else
				play();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void play() {
		if (mediaPlayer != null) {
			sendProgressBroadcast(mediaPlayer.getCurrentPosition(), mediaPlayer.getDuration(), currentMedia.getId());
			mediaPlayer.start();
			startPlayProgressUpdater();
			sendPlayinStartedBroadcast();
		}
	}

	public void setTracks(ArrayList<MMedia> audioTracks, int trackIndex) {
		this.audioTracks = audioTracks;
		startPlayer(trackIndex);
	}

	private void generatePlayer() {
		try {
			stopPlayer();
			if (audioTracks.size() <= 0 || currentIndex >= audioTracks.size())
				return;

			currentMedia = audioTracks.get(currentIndex);
			String path = currentMedia.getPath();

			if (path != null && new File(path).exists()) {
				Uri uri = Uri.fromFile(new File(path));
				mediaPlayer = MediaPlayer.create(this, uri);
				mediaPlayer.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
					@Override
					public void onCompletion(MediaPlayer mp) {
						mediaReachedEnd();
					}
				});

				play();
				showPlayingNotification();
			} else
				mediaReachedEnd();

		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void showPlayingNotification() {
		// mNotifyManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);
		// Notification not = new Notification(R.drawable.icon_audioshow, currentMedia.getInfo(),
		// System.currentTimeMillis());
		// PendingIntent contentIntent = PendingIntent.getActivity(this, 0, new Intent(this, AudioshowActivity.class),
		// Notification.FLAG_ONGOING_EVENT);
		// not.flags = Notification.FLAG_ONGOING_EVENT;
		// not.setLatestEventInfo(this, "Application Name", "Application Description", contentIntent);
		// mNotifyManager.notify(1, not);

		mBuilder.setContentTitle("Bergwild-Audioplayer").setContentText(currentMedia.getInfo()).setSmallIcon(R.drawable.icon_notify_play);
		Intent intent = new Intent(this, AudioshowActivity.class);
		mBuilder.setContentIntent(PendingIntent.getActivity(getApplicationContext(), 0, intent, Notification.FLAG_ONGOING_EVENT));
		mBuilder.setProgress(100, 0, false);
		mNotifyManager.notify(NOTIFICATION_ID, mBuilder.build());

	}

	protected void mediaReachedEnd() {

		mNotifyManager.cancel(NOTIFICATION_ID);

		if (progressNotification != null)
			handler.removeCallbacks(progressNotification);

		if (currentIndex < audioTracks.size() - 1) {
			currentIndex++;
			generatePlayer();
		} else
			sendFinishedBroadcast();

	}

	private void stopPlayer() {
		if (mediaPlayer != null) {
			mediaPlayer.stop();
			sendPlayinStoppedBroadcast();
		}
	}

	private void pausePlayer() {
		if (mediaPlayer != null) {
			mediaPlayer.pause();
			sendPlayinStoppedBroadcast();
		}
	}

	public void startPlayer(int trackIndex) {
		this.currentIndex = Math.min(audioTracks.size() - 1, trackIndex);
		this.currentIndex = Math.max(0, this.currentIndex);
		generatePlayer();
	}

	public boolean isPlaying() {
		return mediaPlayer != null && mediaPlayer.isPlaying();
	}

	public String getPlayingChapterUid() {
		return playingChapterUid;
	}

	public void setPlayingChapterUid(String playingChapterUid) {
		this.playingChapterUid = playingChapterUid;
	}

	public long getMediaID() {
		if (currentMedia != null)
			return currentMedia.getId();
		return 0;
	}

	public boolean forward() {

		if (currentIndex < audioTracks.size() - 1) {
			if (progressNotification != null)
				handler.removeCallbacks(progressNotification);
			currentIndex++;
			generatePlayer();
		}

		return false;
	}

	// public int getDuration() {
	// return duration;
	// }
	//

}
