package de.bergwild.android.mobile.service;

import java.util.ArrayList;

import android.app.NotificationManager;
import android.app.PendingIntent;
import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.os.IBinder;
import android.support.v4.app.NotificationCompat;
import de.bergwild.android.mobile.MainMobile;
import de.bergwild.android.mobile.R;
import de.bergwild.android.mobile.connection.LocalConnector;
import de.bergwild.android.mobile.connection.OnlineConnection;
import de.bergwild.android.mobile.connection.OnlineConnector;
import de.bergwild.android.mobile.tools.ElementHandler;
import de.bergwild.android.mobile.tools.Out;
import de.bergwild.android.util.interfaces.ResultObjectIF;
import de.bw.mm.basis.MVersion;
import de.bw.mm.links.MLinkUserBook;

public class UpdateService extends Service {
	public static String ACTION_BROADCAST = "de.bergwild.android.mobile.service.BROADCAST_UPDATE";
	public static boolean curentlyRunning = false;
	public static final int NOTIFICATION_ID = 63657;
	public static final String TAG_STATE = "status";
	public static final int STATE_RUNNING_ELEMENT = 1;
	public static final int STATE_RUNNING_MEDIA = 2;
	public static final int STATE_FINISHED = 3;
	public static final int STATE_FINISHED_WIDTH_ERROR = 4;
	public static long allLoaded = 0;
	public static long allToLoad = 0;
	public static long loadedOfAll = 0;
	public static long loadedOfFile = 0;

	public static long elementCount = 0;
	public static long elementNUmber = 0;

	private NotificationManager mNotifyManager;
	private NotificationCompat.Builder mBuilder;
	private boolean finishedByCancel = true;
	private ServiceSynchronizer synchronizer;

	@Override
	public void onCreate() {
		super.onCreate();
		Out.s("### GPSService onCreate: UpdateService");
		curentlyRunning = true;
		OnlineConnector.fac().getBookLinks(OnlineConnector.fac().getUser().getUid(), new ResultObjectIF() {
			@SuppressWarnings("unchecked")
			@Override
			public void sentResult(Object object, int errorcode) {
				if (object == null || errorcode != OnlineConnection.OK)
					startSynchronise(new ArrayList<MLinkUserBook>());
				else
					startSynchronise((ArrayList<MLinkUserBook>) object);
			}
		});
	}

	private void startSynchronise(ArrayList<MLinkUserBook> bookLinks) {
		allToLoad = 0;
		loadedOfAll = 0;
		loadedOfFile = 0;
		elementCount = 0;
		elementNUmber = 0;
		allLoaded = 0;

		ArrayList<MVersion> localVersions = LocalConnector.fac().getBookVersions();

		for (MLinkUserBook mLinkUserBook : bookLinks) {
			MVersion onlineVersion = OnlineConnector.fac().getVersion(mLinkUserBook.getBookuid(), mLinkUserBook.getLanguage(), ElementHandler.device);
			if (onlineVersion != null && !localVersions.contains(onlineVersion)) {
				/**
				 * Falls lokal noch gar keine Version vorhanden ist, dann wurde das Buch wohl online neu für den User
				 * freigeschaltet. In diesem fall muss eine lokale Version gebaut werden, die auf jedenfall ein Release
				 * hat das älter ist, als die Online-Version. Dann macht der Synchronizer den Rest. Er erzeugt dann auch
				 * ne neue Report-Datei.
				 **/
				MVersion newLocalVersion = new MVersion(MVersion.MIN_RELEASE_DATE, onlineVersion.getBookUid(), onlineVersion.getBookName(), onlineVersion.getLanguage(), onlineVersion.getDevice());
				localVersions.add(newLocalVersion);
			}
		}

		// Hier noch die online freigeschalteten versionen einfügen. und was doppelt ist löschen.

		synchronizer = new ServiceSynchronizer();
		synchronizer.start(localVersions, new UpdateIF());
	}

	class UpdateIF implements UpdateInterface {

		long count = 0;

		@Override
		public void setProgressOfElementsAndMedia(String txt, int value, int max, boolean media) {
			// Out.e("UpdateIF setProgressOfElementsAndMedia: " + txt + "     " + value + "  /  " + max);
			mBuilder.setProgress(max, value, false).setContentText("Update läuft...  (" + value + " / " + max + ")");
			mNotifyManager.notify(NOTIFICATION_ID, mBuilder.build());

			elementCount = value;
			elementNUmber = max;
			sendBroadcast(STATE_RUNNING_ELEMENT);
		}

		@Override
		public void setDownloadProgress(String txt, long percent, long filelength, long loadedOfFile, long loadedOfAll, long allToLoad, int added) {
			UpdateService.loadedOfFile = loadedOfFile;
			UpdateService.loadedOfAll = loadedOfAll;
			UpdateService.allToLoad = allToLoad;
			UpdateService.allLoaded += added;
			if (count++ % 100 == 0)
				sendBroadcast(STATE_RUNNING_MEDIA);

			// Out.e(txt + "   " + percent + "       " + loadedOfFile + " / " + filelength + "              " +
			// loadedOfAll + " / " + allToLoad);
			// sendBroadcast(STATE_RUNNING);
		}

		@Override
		public void updateStarted() {
			mNotifyManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);
			mBuilder = new NotificationCompat.Builder(UpdateService.this);
			mBuilder.setContentTitle("Bergwild Update").setContentText("Update läuft...").setSmallIcon(R.drawable.icon_update_white);
			Intent intent = new Intent(getApplicationContext(), MainMobile.class);		
			mBuilder.setContentIntent(PendingIntent.getActivity(getApplicationContext(), 0, intent, 0));
			mBuilder.setProgress(100, 0, false);
			mNotifyManager.notify(NOTIFICATION_ID, mBuilder.build());
			// sendBroadcast(STATE_RUNNING);

		}

		@Override
		public void finished(boolean withError, String info) {
			Out.e("UpdateIF finished: " + withError);
			mBuilder.setContentText(info).setProgress(0, 0, false);
			mNotifyManager.notify(NOTIFICATION_ID, mBuilder.build());
			finishedByCancel = false;
			stopSelf();
			sendBroadcast(withError ? STATE_FINISHED_WIDTH_ERROR : STATE_FINISHED);
		}

	}

	public void sendBroadcast(int status) {
		final Intent broadcastIntent = new Intent(ACTION_BROADCAST);
		broadcastIntent.putExtra(TAG_STATE, status);
		getApplicationContext().sendBroadcast(broadcastIntent);

	}

	// void showNotification(String message, String title) {
	// // Start a lengthy operation in a background thread
	// new Thread(new Runnable() {
	// @Override
	// public void run() {
	// int incr;
	// // Do the "lengthy" operation 20 times
	// for (incr = 0; incr <= 100; incr += 5) {
	// // Sets the progress indicator to a max value, the
	// // current completion percentage, and "determinate"
	// // state
	// mBuilder.setProgress(100, incr, false);
	// // Displays the progress bar for the first time.
	// mNotifyManager.notify(0, mBuilder.build());
	// // Sleeps the thread, simulating an operation
	// // that takes time
	// try {
	// // Sleep for 5 seconds
	// Thread.sleep(5 * 1000);
	// } catch (InterruptedException e) {
	// Log.d(TAG, "sleep failure");
	// }
	// }
	// // When the loop is finished, updates the notification
	// mBuilder.setContentText("Download complete")
	// // Removes the progress bar
	// .setProgress(0, 0, false);
	// mNotifyManager.notify(ID, mBuilder.build());
	// }
	// }
	// // Starts the thread by calling the run() method in its Runnable
	// ).start();
	// }

	@Override
	public void onDestroy() {
		super.onDestroy();
		Out.s("### UpdateService onDestroy: UpdateService");
		curentlyRunning = false;
		if (synchronizer != null)
			synchronizer.cancel();
		sendBroadcast(STATE_FINISHED);
		if (finishedByCancel) {
			mBuilder.setContentText("Update abgebrochen").setProgress(0, 0, false);
			mNotifyManager.notify(NOTIFICATION_ID, mBuilder.build());
		}

	}

	@Override
	public IBinder onBind(Intent intent) {
		// TODO Auto-generated method stub
		return null;
	}

}
